import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from pybit.unified_trading import HTTP
import logging
from environs import Env

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
BYBIT_API_KEY = env.str("API_KEY")
BYBIT_API_SECRET = env.str("API_SECRET")
TELEGRAM_TOKEN = env.str("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = env.str("TELEGRAM_CHAT_ID")
SYMBOL = env.str("SYMBOL")
TARGET_PROFIT_PERCENT = env.float("TARGET_PROFIT_PERCENT")
AMOUNT = 10

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Bybit
session = HTTP(
    testnet=True,
    api_key=BYBIT_API_KEY,
    api_secret=BYBIT_API_SECRET
)


class TradingBot:
    def __init__(self):
        self.active_position = None
        self.monitor_task = None

    async def open_position(self) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            response = session.place_order(
                category="spot",
                symbol=SYMBOL,
                side="Buy",
                orderType="MARKET",
                qty=str(AMOUNT),
                marketUnit="quoteCoin"
            )

            if response['retCode'] == 0:
                order_id = response['result']['orderId']
                order_book = await self.get_order_book()
                entry_price = order_book.get('bid')
                target_price = round(entry_price * (1 + TARGET_PROFIT_PERCENT / 100), 3)
                target_amount = round(AMOUNT * (1 + TARGET_PROFIT_PERCENT / 100), 3)

                self.active_position = {
                    'order_id': order_id,
                    'symbol': SYMBOL,
                    'entry_price': entry_price,
                    'amount': AMOUNT,
                    'target_price': target_price,
                    'target_amount': target_amount
                }

                logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.active_position}")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏
                self.monitor_task = asyncio.create_task(self.monitor_position())

                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return False

    async def close_position(self) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            response = session.place_order(
                category="spot",
                symbol=SYMBOL,
                side="Sell",
                orderType="MARKET",
                qty=str(self.active_position['target_amount']),
                marketUnit="quoteCoin"
            )

            if response['retCode'] == 0:
                order_book = await self.get_order_book()
                ask_price = order_book.get('ask')
                profit = (ask_price / self.active_position['entry_price'] - 1) * self.active_position['amount']
                profit_percentage = ((ask_price / self.active_position['entry_price']) - 1) * 100

                await self.send_notification(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é!\n"
                                             f"–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {self.active_position['symbol']}\n"
                                             f"–ü—Ä–∏–±—ã–ª—å: {profit:.2f} USDT\n"
                                             f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: {profit_percentage:.2f}%\n"
                                             f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {self.active_position['entry_price']}\n"
                                             f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {ask_price}")
                logger.info(f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ: {self.active_position}")
                self.active_position = None

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏
                if self.monitor_task:
                    self.monitor_task.cancel()
                    self.monitor_task = None
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return False

    async def monitor_position(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        while True:
            try:
                if self.active_position:
                    order_book = await self.get_order_book()
                    bid_price = order_book.get('bid')
                    ask_price = order_book.get('ask')

                    if bid_price is None or ask_price is None:
                        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –æ—Ä–¥–µ—Ä–±—É–∫–∞")
                        continue

                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
                    if ask_price >= self.active_position['target_price']:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏
                        await self.close_position()


            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–∏: {e}")

            await asyncio.sleep(1)

    @staticmethod
    async def send_notification(message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

    @staticmethod
    async def get_order_book() -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ orderbook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            response = session.get_orderbook(category="spot", symbol=SYMBOL)
            bid_price = float(response['result']['b'][0][0])  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            ask_price = float(response['result']['a'][0][0])  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            return {'bid': bid_price, 'ask': ask_price}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ orderbook: {e}")

    @staticmethod
    async def start_bot():
        await dp.start_polling(bot)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
trading_bot = TradingBot()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è Bybit.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/trade - –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é"
    )


@dp.message(Command("status"))
async def status_command(message: types.Message):
    if trading_bot.active_position:
        order_book = await trading_bot.get_order_book()
        current_price = order_book.get('bid')
        current_profit = ((current_price / trading_bot.active_position['entry_price']) - 1) * 100

        await message.answer(
            f"üìä –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:\n"
            f"–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {trading_bot.active_position['symbol']}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trading_bot.active_position['entry_price']}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}\n"
            f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: {current_profit:.2f}%\n"
            f"–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {TARGET_PROFIT_PERCENT}%"
        )
    else:
        await message.answer("‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")


@dp.message(Command("trade"))
async def trade_command(message: types.Message):
    if trading_bot.active_position:
        await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è!")
        return

    try:
        if await trading_bot.open_position():
            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!\n"
                f"–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {trading_bot.active_position['symbol']}\n"
                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trading_bot.active_position['entry_price']}\n"
                f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {trading_bot.active_position['target_price']}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["API_KEY", "API_SECRET", "TELEGRAM_TOKEN", "TELEGRAM_CHAT_ID"]
    missing_vars = [var for var in required_vars if not env.str(var, "")]

    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return

    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {SYMBOL}, –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {TARGET_PROFIT_PERCENT}%")
    await trading_bot.send_notification(
        f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {SYMBOL}\n"
        f"–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {TARGET_PROFIT_PERCENT}%")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await trading_bot.start_bot()


if __name__ == "__main__":
    asyncio.run(main())
